{"version":3,"sources":["reducers/weatherDataReducer.js","containers/Search/Search.jsx","components/ErrorMessage.jsx","containers/SearchSpace.jsx","containers/App.js","reducers/index.js","serviceWorker.js","index.js"],"names":["API","initialState","data","error","WEATHER_REQUEST","SUCCESS","ERROR","CLEAR","newWeatherData","form","dispatch","axios","get","concat","city","then","response","type","payload","catch","message","clearError","Search","_this$props","this","props","handleSubmit","react_default","a","createElement","className","onSubmit","Field","name","component","label","Component","reduxFormComponent","reduxForm","connect","Object","objectSpread","bindActionCreators","ErrorMessage","role","data-dismiss","aria-label","onClick","aria-hidden","SearchSpace","apiError","components_ErrorMessage","react","containers_Search_Search","renderError","state","weatherDataReducer","App","containers_SearchSpace","rootReducer","combineReducers","reducerForm","arguments","length","undefined","action","Boolean","window","location","hostname","match","createStoreWithMiddleware","applyMiddleware","thunk","createStore","ReactDOM","render","es","store","__REDUX_DEVTOOLS_EXTENSION__","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1a18d67.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst API = {\n  END_POINT: \"http://api.openweathermap.org/data/2.5/weather?q=\",\n  KEY: \"&appid=ee356788128cce43945d9f061582f588\",\n}\n\nconst initialState = {\n  data: null,\n  error: null,\n}\n\nconst WEATHER_REQUEST = {\n  SUCCESS: 'SUCCESS',\n  ERROR: 'ERROR',\n  CLEAR: 'CLEAR',\n}\n\nexport const newWeatherData = form => dispatch => {\n  axios.get(`${API.END_POINT}${form.city}${API.KEY}`).then((response) => {\n    dispatch({\n        type: WEATHER_REQUEST.SUCCESS,\n        payload: response.data,\n      })\n  }).catch((error) => {\n    if (error.response.data.message) {\n      dispatch({\n        type: WEATHER_REQUEST.ERROR,\n        payload: error.response.data.message,\n      })\n    }\n  })\n}\n\nexport const clearError = () => ({\n  type: WEATHER_REQUEST.CLEAR,\n})\n\nexport default function weatherDataReducer(state = initialState, action) {\n  switch (action.type) {\n    case WEATHER_REQUEST.SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n      }\n\n    case WEATHER_REQUEST.ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      }\n    \n    case WEATHER_REQUEST.CLEAR:\n      return {\n        ...state,\n        error: initialState.error,\n      }\n\n    default:\n      return state\n  }\n}\n","import React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form'\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'\nimport { newWeatherData } from '../../reducers/weatherDataReducer'\n\nclass Search extends Component {\n  render() {\n    const { \n      handleSubmit,\n      newWeatherData,\n    } = this.props\n\n    return (\n      <div className=\"Search\">\n        <form onSubmit={handleSubmit(newWeatherData)}>\n          <Field\n            name=\"city\"\n            type=\"text\"\n            component=\"input\"\n            label=\"City\"\n          />\n\n          <button \n            className=\"btn btn-primary\"\n            type=\"submit\"\n          >\n            Search\n          </button>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst formConfig = {\n  form: 'WeatherForm'\n};\n\nconst reduxFormComponent = reduxForm(formConfig)(Search);\n\nconst mapDispatchToProps = (dispatch) => ({\n  ...bindActionCreators( { newWeatherData } ,dispatch)\n})\n\nexport default connect(null, mapDispatchToProps)(reduxFormComponent);\n","import React from 'react';\n\nconst ErrorMessage = (props) => {\n  return (\n    <div\n      className=\"alert alert-danger alert-dismissible fade show\"\n      role=\"alert\"\n    >\n      <strong>Holy guacamole ! </strong>\n      { props.error }\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={props.clearError}\n      >\n\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  )\n}\nexport default ErrorMessage\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'\nimport { clearError } from '../reducers/weatherDataReducer'\nimport Search from './Search/Search'\nimport ErrorMessage from '../components/ErrorMessage';\n\nclass SearchSpace extends Component {\n  \n  renderError() {\n    const {\n      apiError,\n      clearError,\n    } = this.props;\n\n    if (apiError) {\n      return (\n        <ErrorMessage error={apiError} clearError={clearError}/>\n      )\n    }\n  }\n  \n  render() { \n    return (\n      <Fragment>\n        <Search />\n        { this.renderError() }\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  apiError: state.weatherDataReducer.error,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  ...bindActionCreators( { clearError }, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchSpace);\n","import React, { Component } from 'react';\nimport SearchSpace from './SearchSpace';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"display-4\">Welcome to weather app</h1>\n\n        <SearchSpace />\n        \n      </div>\n    )\n  }\n}\n","import { combineReducers } from \"redux\"\nimport { reducer as reducerForm } from 'redux-form'\nimport weatherDataReducer from './weatherDataReducer'\n\n\nconst rootReducer = combineReducers({\n  form: reducerForm,\n  weatherDataReducer,\n})\n\nexport default rootReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport thunk from \"redux-thunk\"\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst createStoreWithMiddleware = applyMiddleware(thunk)(createStore);\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleware(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())}>\n    <App />\n  </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}